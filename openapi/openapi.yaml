openapi: 3.1.0
info:
  title: API
  version: 1.0.0
paths:
  /tasks/{id}:
    patch:
      summary: patch task
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: uint
      requestBody:
        description: the task to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Updated task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
    delete:
      summary: delete task
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: uint
      responses:
        '204':
          description: Successfully delete task
  /tasks:
    get:
      summary: Get all tasks
      tags:
        - tasks
      responses:
        '200':
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
    post:
      summary: Create a new task
      tags:
        - tasks
      requestBody:
        description: The task to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'

      responses:
        '201':
          description: The created task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
  /users/{id}:
    patch:
      summary: patch user
      operationId: PatchUserByID
      tags:
        - users
      parameters:
          - name: id
            in: path
            required: true
            schema:
              type: integer
              format: uint
      requestBody:
        description: the user to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: delete user
      operationId: DeleteUserByID
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: uint
      responses:
        '204':
          description: Successfully deleted user
  /users/{id}/tasks:
    get:
      summary: Get all the user's tasks
      operationId: GetTasksByUserID
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: uint
      responses:
        '200':
          description: A list of tasks for a user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'



  /users:
    get:
      summary: Get all users
      operationId: GetUsers
      tags:
        - users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      operationId: PostUser
      tags:
        - users
      requestBody:
        description: User to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: The created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'


components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: uint
        email:
          type: string
        password:
          type: string

    Task:
      type: object
      properties:
        user_id:
          type: integer
          format: uint
        id:
          type: integer
          format: uint
        task:
          type: string
        is_done:
          type: boolean